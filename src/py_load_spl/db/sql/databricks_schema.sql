-- DDL for py-load-spl Databricks database
-- Based on FRD Section 4 and adapted from postgres_schema.sql

-- =================================================================
-- ETL Tracking Schema (FRD Sec 4.3)
-- =================================================================

CREATE TABLE IF NOT EXISTS etl_load_history (
    run_id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status STRING,
    mode STRING,
    archives_processed INT,
    records_loaded BIGINT,
    error_log STRING
);

CREATE TABLE IF NOT EXISTS etl_processed_archives (
    archive_name STRING PRIMARY KEY,
    archive_checksum STRING,
    processed_timestamp TIMESTAMP
);

-- =================================================================
-- Full Representation Schema (FRD Sec 4.2)
-- =================================================================

CREATE TABLE IF NOT EXISTS spl_raw_documents (
    document_id STRING PRIMARY KEY,
    set_id STRING,
    version_number INT,
    effective_time DATE,
    raw_data STRING, -- Storing as STRING, can be parsed with from_json
    source_filename STRING,
    loaded_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS spl_raw_documents_staging (
    document_id STRING,
    set_id STRING,
    version_number INT,
    effective_time DATE,
    raw_data STRING,
    source_filename STRING,
    loaded_at TIMESTAMP
);


-- =================================================================
-- Standard Representation Schema (FRD Sec 4.1)
-- =================================================================

-- Production Tables

CREATE TABLE IF NOT EXISTS products (
    document_id STRING PRIMARY KEY,
    set_id STRING,
    version_number INT,
    effective_time DATE,
    product_name STRING,
    manufacturer_name STRING,
    dosage_form STRING,
    route_of_administration STRING,
    is_latest_version BOOLEAN,
    loaded_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS product_ndcs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    document_id STRING,
    ndc_code STRING
);

CREATE TABLE IF NOT EXISTS ingredients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    document_id STRING,
    ingredient_name STRING,
    substance_code STRING,
    strength_numerator STRING,
    strength_denominator STRING,
    unit_of_measure STRING,
    is_active_ingredient BOOLEAN
);

CREATE TABLE IF NOT EXISTS packaging (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    document_id STRING,
    package_ndc STRING,
    package_description STRING,
    package_type STRING
);

CREATE TABLE IF NOT EXISTS marketing_status (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    document_id STRING,
    marketing_category STRING,
    start_date DATE,
    end_date DATE
);

-- Staging Tables (for bulk loading)

CREATE TABLE IF NOT EXISTS products_staging (
    document_id STRING,
    set_id STRING,
    version_number INT,
    effective_time DATE,
    product_name STRING,
    manufacturer_name STRING,
    dosage_form STRING,
    route_of_administration STRING,
    is_latest_version BOOLEAN,
    loaded_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS product_ndcs_staging (
    id BIGINT,
    document_id STRING,
    ndc_code STRING
);

CREATE TABLE IF NOT EXISTS ingredients_staging (
    id BIGINT,
    document_id STRING,
    ingredient_name STRING,
    substance_code STRING,
    strength_numerator STRING,
    strength_denominator STRING,
    unit_of_measure STRING,
    is_active_ingredient BOOLEAN
);

CREATE TABLE IF NOT EXISTS packaging_staging (
    id BIGINT,
    document_id STRING,
    package_ndc STRING,
    package_description STRING,
    package_type STRING
);

CREATE TABLE IF NOT EXISTS marketing_status_staging (
    id BIGINT,
    document_id STRING,
    marketing_category STRING,
    start_date DATE,
    end_date DATE
);
